//best code from solution

class Solution {
public:
    bool isPalindrome(string s) {
       int start=0;
       int end=s.size()-1;
       while(start<=end){
           if(!isalnum(s[start])){start++; continue;}
           if(!isalnum(s[end])){end--;continue;}
           if(tolower(s[start])!=tolower(s[end]))return false;
           else{
               start++;
               end--;
           }
       }
       return true;
}
};

// babbar bhaiya approach to check if given string is palindrome ? if originnal string == reversed string then it's palindrome
there are 3 steps
1. remove faltu characters
2. convert caps to lowercase
3. check palindrome by creating new string name as temp which is free from faltu character and non case sensitive

class Solution {
private:
bool valid(char ch){
    if((ch >= 'a' && ch <= 'z')||(ch >= 'A' && ch <='Z')||(ch >= 0 && ch <=9)){
        return 1 ; 

    }
    return 0 ; 

}
char tolowerCase(char ch){
    if((ch >= 'a' && ch<= 'z') || (ch >= '0' && ch<='9')){
        return ch;
    }
    else{
        char temp = ch - 'A'+'a';
        return temp ; 
    }
}

bool checkPalindrome(string a){
    int s = 0 ;
    int e = a.length()-1 ;
    while(s<=e){
        if(a[s] != a[e]){
            return 0 ;
        }
        else{
            s++;
            e--;
        }
    }
    return 1 ; 
}
public:
    bool isPalindrome(string s) {
        // remove faltu character : see valid function above
        string temp = " "; //null string
        for(int j = 0 ; j< s.length(); j++){
            if(valid(s[j])){
                temp.push_back(s[j]);

            }
        }
        //change to lower case making it non case sensitive
        for(int j = 0 ; j< s.length(); j++){
            temp[j] = tolowerCase(temp[j]);
        }
        return checkPalindrome(temp); 


    }
    //check palindrome after removing faltu char and converting to lower case
};

