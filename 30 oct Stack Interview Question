q1. Reverse stack using recursion

void insertbottom(stack<int> &stack , int x){
    if(stack.empty()){
        stack.push(x);
        return ;
    }
    else{
        int num = stack.top();
        stack.pop();
        insertbottom(stack,x);
        stack.push(num);
    }
}



void reverseStack(stack<int> &stack) {
    if(stack.empty()){
        
        
        return ;

    }
    int num = stack.top();
    stack.pop();
    reverseStack(stack);
    insertbottom(stack,num); 

   
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


q2. sort the stack

#include <bits/stdc++.h> 

void sortedInsert(stack<int> &stack , int num){
    if(stack.empty() || (!stack.empty() && stack.top() < num)){
        stack.push(num);
        return ;

    }
    int n = stack.top();
    stack.pop();
    sortedInsert(stack,num);
    stack.push(n);


}
void sortStack(stack<int> &stack)
{
    if(stack.empty()){
        return ;
    }
    int num = stack.top();
    stack.pop();
    sortStack(stack);
    sortedInsert(stack , num);
	
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
