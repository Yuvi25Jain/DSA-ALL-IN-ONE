1. redundant bracket = {{a+b}} means {} is redundant i.e. no operator consume. during coding ignore lower case a-z 

#include<stack>

bool findRedundantBrackets(string &s)
{
    stack<char> st;
    for(int i=0; i<s.length(); i++) {
        char ch =s[i];
        
        if(ch == '(' || ch == '+' ||ch == '-' || ch == '*' || ch == '/') {
            st.push(ch);
        }
        else
        {
            //ch ya toh ')' hai or lowercase letter
            
            if(ch == ')') {
                bool isRedundant = true;
                
                while(st.top() != '(') {
                    char top = st.top();
                    if(top == '+' ||top == '-' || top == '*' || top == '/') {
                        isRedundant = false;
                    }
                    st.pop();
                }
                
                if(isRedundant == true)
                    return true;
                st.pop();
            }
            
        } 
    }
    return false;
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


2. minimum bracket reversal :

https://www.naukri.com/code360/problems/minimum-cost-to-make-string-valid_1115770?leftPanelTab=0%3Fsource%3Dyoutube&campaign=Lovebabbarcodestudio&utm_source=youtube&utm_medium=affiliate&utm_campaign=Lovebabbarcodestudio&leftPanelTabValue=SUBMISSION


#include <bits/stdc++.h> 
#include<stack>


int findMinimumCost(string str) {
  //odd case
  if(str.length() % 2 == 1){
    return -1;
  }
  stack <char> s;
  for(int i = 0 ; i<str.length() ; i++){
    char ch = str[i];
    if(ch == '{'){
      s.push(ch);
    }
    else{
      if(!s.empty() && s.top() == '{'){
        s.pop();
      }
      else{
        s.push(ch);
      }
    }
  }

  //invalid
  // a count of close brace and b count of open braces

  int a = 0 , b  = 0 ;
  while(!s.empty()){
    if(s.top() == '{'){
      b++;
    }
    else{
      a++ ;
    }
    s.pop();
   
  }
   int ans = (a+1)/2 + (b+1)/2 ;
    return ans ;
  
}

