Q1: Swap alternate

void swapAlter(int a[],int n){
    for(int i=0; i<n; i+=2){
        if((i+1)<n){
            swap(a[i],a[i+1]);
        }
    }
}

int b[5] = {1,2,3,4,5};
2 1 4 3 5

------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q2: find unique element in array:

LOGIC: use of XOR operator a^a = 0 and 0^a = a (optimal approch)

int uniqueELement(int a[], int n){
    int ans = 0;
    for(int i=0 ; i<n ; i++){
    ans = ans^a[i];
    }
    return ans;
}
int b[5] = {2,2,4,4,5};
  cout<<"Unique element is: "<<uniqueELement(b,5)<<endl;

---------------------------------------------------------------------------------------------------------------------------------------------------------
q3: duplicate in array 
int duplicate(int a[], int n){
    int ans = 0;
    //xor from 0 to n 
    for(int i = 0 ; i<n ; i++){
        ans = ans^a[i];
        
    }
    //xor from 1 to n
    for(int i=1 ; i<n ; i++){
        ans = ans^i;
    }
    return ans;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------
question 4: sorting of array in ascending and descending

ASCENDING A[I]>A[J]

for(int i=0 ; i<5; i++){
        for(int j = i+1; j<5; j++){
            if(b[i]>b[j]){
                temp = b[i];
                b[i]= b[j];
                b[j] = temp;
                
            }
        }
        
    }
}

FOR DESCENDING : A[I]<A[J]
for(int i=0 ; i<5; i++){
        for(int j = i+1; j<5; j++){
            if(b[i]<b[j]){
                temp = b[i];
                b[i]= b[j];
                b[j] = temp;
                
            }
        }
        
    }

-----------------------------------------------------------------------------------------------------------------------------------------------------------
q5: triplet of number : to print three element whose sum is equal to the given sum

int b[6] = {1,2,3,4,5,3};
for(int i = 0 ; i<6; i++){
		for(int j = i+1 ; j<6 ; j++){
			for(int k = j+1 ; k<6 ; k++){
				if(b[i]+b[j]+b[k]==s){
					cout<<b[i]<<" "<<b[j]<<" "<<b[k]<<" ";
					cout<<endl;
				}
			}
		}
	}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
q6: sort of array 0 and 1: 

{0,1,0,1,1,0,1,0} sort to  {0 0 0 0 1 1 1 1}

LOGIC: there are various logic . Eg1 : counting 0 and 1 and then sort them(2 times traverse) , Eg2 : sorting of array , Eg3: two pointer approach (1 time traverse), Eg 4 using here is to 
arrange all the zeros in left and all 1s in right.

there are two conditions
1. 0 and 1 is already present at utmost left and right. so we will shift the left++ and right --.
2. 1 is present at left and 0 is present at right then swap them
3. i<j should always follow




code: 
void Sortone(int a[], int n){
	// i = left and j = right = n-1
	int i = 0 , j = n-1 ;
	while(i<j){
		while(a[i] == 0 && i<j){
			i++;
		}
		while(a[j] == 1 && i<j){
			j--;
      	}
      	if(a[i] == 1 && a[j]== 0 && i<j){
      		swap(a[i], a[j]);
      		i++;
      		j--;
      		
	} 
	}
	
}


way2: using sorting of array
void Sortone(int a[], int n){
    for(int i = 0 ; i < n ; i++){
        for(int j = i+1 ; j < n ; j++){
            if(a[i] > a[j]){
                int temp; 
                temp = a[i];
                a[i] = a[j];
                a[j] = temp;
            }
        }
        cout << a[i] << " ";    
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
