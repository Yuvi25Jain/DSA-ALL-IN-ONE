int binarySearch(int a[], int n , int key){
    int start = 0 ; 
    int end = n-1;
    int mid = (start+ end)/2;
    while(start<=end){
        if(a[mid]== key){
            return mid;
        }
        //right side :contains high number 
        if(key>a[mid]){
            start = mid +1;
        }
        else{ //left side wala part
            end = mid - 1;
        }
        mid = (start+end)/2;
    }
    return -1; 
}

apply only on ascending or descending sorted array .

step 1 : mid = (start + end)/ 2 where s = 0 and end = n-1
step 2 : compare if a[mid] = = key return mid. if not then if key > a[mid] shift towards right which means s = mid + 1 ;
step 3 : similarly for end = mid - 1 to shift left side
step 4 : now update mid again ... as it splits the array in 1st iteration
